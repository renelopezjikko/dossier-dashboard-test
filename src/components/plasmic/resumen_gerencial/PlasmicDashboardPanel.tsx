// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 2kD2XthGtXKCG8U42Tcha7
// Component: RFL4aeFfPU
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import DashboardPanelContent from "../../DashboardPanelContent"; // plasmic-import: vnBlyrKYZiC/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_resumen_gerencial.module.css"; // plasmic-import: 2kD2XthGtXKCG8U42Tcha7/projectcss
import sty from "./PlasmicDashboardPanel.module.css"; // plasmic-import: RFL4aeFfPU/css

export type PlasmicDashboardPanel__VariantMembers = {
  selected: "selected";
  estado: "enTermino" | "atrasado" | "recaudado" | "suspendidos";
};
export type PlasmicDashboardPanel__VariantsArgs = {
  selected?: SingleBooleanChoiceArg<"selected">;
  estado?: SingleChoiceArg<
    "enTermino" | "atrasado" | "recaudado" | "suspendidos"
  >;
};
type VariantPropType = keyof PlasmicDashboardPanel__VariantsArgs;
export const PlasmicDashboardPanel__VariantProps = new Array<VariantPropType>(
  "selected",
  "estado"
);

export type PlasmicDashboardPanel__ArgsType = {};
type ArgPropType = keyof PlasmicDashboardPanel__ArgsType;
export const PlasmicDashboardPanel__ArgProps = new Array<ArgPropType>();

export type PlasmicDashboardPanel__OverridesType = {
  root?: p.Flex<"div">;
};

export interface DefaultDashboardPanelProps {
  selected?: SingleBooleanChoiceArg<"selected">;
  estado?: SingleChoiceArg<
    "enTermino" | "atrasado" | "recaudado" | "suspendidos"
  >;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicDashboardPanel__RenderFunc(props: {
  variants: PlasmicDashboardPanel__VariantsArgs;
  args: PlasmicDashboardPanel__ArgsType;
  overrides: PlasmicDashboardPanel__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs = React.useMemo(
    () => [
      {
        path: "selected",
        type: "private",
        variableType: "variant",
        initFunc: true ? ($props, $state, $ctx) => $props.selected : undefined
      },
      {
        path: "estado",
        type: "private",
        variableType: "variant",
        initFunc: true ? ($props, $state, $ctx) => $props.estado : undefined
      }
    ],
    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, $props, $ctx);

  const [$queries, setDollarQueries] = React.useState({});

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [sty.rootestado_atrasado]: hasVariant($state, "estado", "atrasado"),
          [sty.rootestado_atrasado_selected]:
            hasVariant($state, "selected", "selected") &&
            hasVariant($state, "estado", "atrasado"),
          [sty.rootestado_enTermino]: hasVariant($state, "estado", "enTermino"),
          [sty.rootestado_enTermino_selected]:
            hasVariant($state, "selected", "selected") &&
            hasVariant($state, "estado", "enTermino"),
          [sty.rootestado_recaudado]: hasVariant($state, "estado", "recaudado"),
          [sty.rootestado_recaudado_selected]:
            hasVariant($state, "selected", "selected") &&
            hasVariant($state, "estado", "recaudado"),
          [sty.rootestado_suspendidos]: hasVariant(
            $state,
            "estado",
            "suspendidos"
          ),
          [sty.rootestado_suspendidos_selected]:
            hasVariant($state, "selected", "selected") &&
            hasVariant($state, "estado", "suspendidos"),
          [sty.rootselected]: hasVariant($state, "selected", "selected")
        }
      )}
    >
      <DashboardPanelContent
        className={classNames(
          "__wab_instance",
          sty.dashboardPanelContent___2Xzot,
          {
            [sty.dashboardPanelContentestado_atrasado___2XzotUzYY]: hasVariant(
              $state,
              "estado",
              "atrasado"
            ),
            [sty.dashboardPanelContentestado_atrasado_selected___2XzotUzYYNiU0S]:
              hasVariant($state, "selected", "selected") &&
              hasVariant($state, "estado", "atrasado"),
            [sty.dashboardPanelContentestado_enTermino___2XzotVhkod]:
              hasVariant($state, "estado", "enTermino"),
            [sty.dashboardPanelContentestado_enTermino_selected___2XzotVhkodNiU0S]:
              hasVariant($state, "selected", "selected") &&
              hasVariant($state, "estado", "enTermino"),
            [sty.dashboardPanelContentestado_recaudado___2XzotZQcN9]:
              hasVariant($state, "estado", "recaudado"),
            [sty.dashboardPanelContentestado_recaudado_selected___2XzotZQcN9NiU0S]:
              hasVariant($state, "selected", "selected") &&
              hasVariant($state, "estado", "recaudado"),
            [sty.dashboardPanelContentestado_suspendidos___2XzotFlpx]:
              hasVariant($state, "estado", "suspendidos"),
            [sty.dashboardPanelContentestado_suspendidos_selected___2XzotFlpxNiU0S]:
              hasVariant($state, "selected", "selected") &&
              hasVariant($state, "estado", "suspendidos"),
            [sty.dashboardPanelContentselected___2XzotniU0S]: hasVariant(
              $state,
              "selected",
              "selected"
            )
          }
        )}
        estado={
          hasVariant($state, "selected", "selected") &&
          hasVariant($state, "estado", "atrasado")
            ? ("atrasado" as const)
            : hasVariant($state, "selected", "selected") &&
              hasVariant($state, "estado", "enTermino")
            ? ("enTermino" as const)
            : hasVariant($state, "estado", "suspendidos")
            ? ("suspendidos" as const)
            : hasVariant($state, "estado", "recaudado")
            ? ("recaudado" as const)
            : hasVariant($state, "estado", "atrasado")
            ? ("atrasado" as const)
            : hasVariant($state, "estado", "enTermino")
            ? ("enTermino" as const)
            : undefined
        }
      />
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDashboardPanel__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDashboardPanel__VariantsArgs;
    args?: PlasmicDashboardPanel__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDashboardPanel__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicDashboardPanel__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicDashboardPanel__ArgProps,
          internalVariantPropNames: PlasmicDashboardPanel__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicDashboardPanel__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDashboardPanel";
  } else {
    func.displayName = `PlasmicDashboardPanel.${nodeName}`;
  }
  return func;
}

export const PlasmicDashboardPanel = Object.assign(
  // Top-level PlasmicDashboardPanel renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicDashboardPanel
    internalVariantProps: PlasmicDashboardPanel__VariantProps,
    internalArgProps: PlasmicDashboardPanel__ArgProps
  }
);

export default PlasmicDashboardPanel;
/* prettier-ignore-end */
