// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 2kD2XthGtXKCG8U42Tcha7
// Component: vnBlyrKYZiC
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import TextGroup from "../../TextGroup"; // plasmic-import: WtPaT5ym56/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_resumen_gerencial.module.css"; // plasmic-import: 2kD2XthGtXKCG8U42Tcha7/projectcss
import sty from "./PlasmicDashboardPanelContent.module.css"; // plasmic-import: vnBlyrKYZiC/css

export type PlasmicDashboardPanelContent__VariantMembers = {
  estado: "enTermino" | "atrasado" | "recaudado" | "suspendidos";
};
export type PlasmicDashboardPanelContent__VariantsArgs = {
  estado?: SingleChoiceArg<
    "enTermino" | "atrasado" | "recaudado" | "suspendidos"
  >;
};
type VariantPropType = keyof PlasmicDashboardPanelContent__VariantsArgs;
export const PlasmicDashboardPanelContent__VariantProps =
  new Array<VariantPropType>("estado");

export type PlasmicDashboardPanelContent__ArgsType = {};
type ArgPropType = keyof PlasmicDashboardPanelContent__ArgsType;
export const PlasmicDashboardPanelContent__ArgProps = new Array<ArgPropType>();

export type PlasmicDashboardPanelContent__OverridesType = {
  root?: p.Flex<"div">;
  text?: p.Flex<"div">;
  textGroup?: p.Flex<typeof TextGroup>;
  title?: p.Flex<"div">;
  subtitle?: p.Flex<"div">;
  total?: p.Flex<typeof TextGroup>;
  title2?: p.Flex<"div">;
  subtitle2?: p.Flex<"div">;
  capital?: p.Flex<typeof TextGroup>;
  title3?: p.Flex<"div">;
  subtitle3?: p.Flex<"div">;
  intereses?: p.Flex<typeof TextGroup>;
  title4?: p.Flex<"div">;
  subtitle4?: p.Flex<"div">;
};

export interface DefaultDashboardPanelContentProps {
  estado?: SingleChoiceArg<
    "enTermino" | "atrasado" | "recaudado" | "suspendidos"
  >;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicDashboardPanelContent__RenderFunc(props: {
  variants: PlasmicDashboardPanelContent__VariantsArgs;
  args: PlasmicDashboardPanelContent__ArgsType;
  overrides: PlasmicDashboardPanelContent__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs = React.useMemo(
    () => [
      {
        path: "estado",
        type: "private",
        variableType: "variant",
        initFunc: true ? ($props, $state, $ctx) => $props.estado : undefined
      }
    ],
    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, $props, $ctx);

  const [$queries, setDollarQueries] = React.useState({});

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [sty.rootestado_atrasado]: hasVariant($state, "estado", "atrasado"),
          [sty.rootestado_enTermino]: hasVariant($state, "estado", "enTermino"),
          [sty.rootestado_recaudado]: hasVariant($state, "estado", "recaudado"),
          [sty.rootestado_suspendidos]: hasVariant(
            $state,
            "estado",
            "suspendidos"
          )
        }
      )}
    >
      <div
        data-plasmic-name={"text"}
        data-plasmic-override={overrides.text}
        className={classNames(projectcss.all, projectcss.__wab_text, sty.text, {
          [sty.textestado_atrasado]: hasVariant($state, "estado", "atrasado"),
          [sty.textestado_enTermino]: hasVariant($state, "estado", "enTermino"),
          [sty.textestado_recaudado]: hasVariant($state, "estado", "recaudado"),
          [sty.textestado_suspendidos]: hasVariant(
            $state,
            "estado",
            "suspendidos"
          )
        })}
      >
        {hasVariant($state, "estado", "suspendidos")
          ? "Suspendidos"
          : hasVariant($state, "estado", "recaudado")
          ? "Recaudados"
          : hasVariant($state, "estado", "atrasado")
          ? "Atrasados"
          : hasVariant($state, "estado", "enTermino")
          ? "En t√©rmino"
          : "Total"}
      </div>

      <TextGroup
        data-plasmic-name={"textGroup"}
        data-plasmic-override={overrides.textGroup}
        className={classNames("__wab_instance", sty.textGroup)}
        subtitle={
          <div
            data-plasmic-name={"subtitle"}
            data-plasmic-override={overrides.subtitle}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.subtitle,
              {
                [sty.subtitleestado_atrasado]: hasVariant(
                  $state,
                  "estado",
                  "atrasado"
                ),
                [sty.subtitleestado_enTermino]: hasVariant(
                  $state,
                  "estado",
                  "enTermino"
                )
              }
            )}
          >
            {"N.NNN"}
          </div>
        }
        title={
          <div
            data-plasmic-name={"title"}
            data-plasmic-override={overrides.title}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.title,
              {
                [sty.titleestado_atrasado]: hasVariant(
                  $state,
                  "estado",
                  "atrasado"
                ),
                [sty.titleestado_enTermino]: hasVariant(
                  $state,
                  "estado",
                  "enTermino"
                ),
                [sty.titleestado_recaudado]: hasVariant(
                  $state,
                  "estado",
                  "recaudado"
                ),
                [sty.titleestado_suspendidos]: hasVariant(
                  $state,
                  "estado",
                  "suspendidos"
                )
              }
            )}
          >
            {hasVariant($state, "estado", "suspendidos")
              ? "Expedientes"
              : hasVariant($state, "estado", "recaudado")
              ? "Expedientes"
              : hasVariant($state, "estado", "atrasado")
              ? "Expedientes"
              : hasVariant($state, "estado", "enTermino")
              ? "Expedientes"
              : "Expedientes generados"}
          </div>
        }
      />

      <TextGroup
        data-plasmic-name={"total"}
        data-plasmic-override={overrides.total}
        className={classNames("__wab_instance", sty.total, {
          [sty.totalestado_atrasado]: hasVariant($state, "estado", "atrasado"),
          [sty.totalestado_recaudado]: hasVariant($state, "estado", "recaudado")
        })}
        subtitle={
          <div
            data-plasmic-name={"subtitle2"}
            data-plasmic-override={overrides.subtitle2}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.subtitle2,
              {
                [sty.subtitle2estado_atrasado]: hasVariant(
                  $state,
                  "estado",
                  "atrasado"
                ),
                [sty.subtitle2estado_enTermino]: hasVariant(
                  $state,
                  "estado",
                  "enTermino"
                )
              }
            )}
          >
            {"$ NNN.NNN.NNN"}
          </div>
        }
        title={
          <div
            data-plasmic-name={"title2"}
            data-plasmic-override={overrides.title2}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.title2,
              {
                [sty.title2estado_enTermino]: hasVariant(
                  $state,
                  "estado",
                  "enTermino"
                )
              }
            )}
          >
            {"Total"}
          </div>
        }
      />

      <TextGroup
        data-plasmic-name={"capital"}
        data-plasmic-override={overrides.capital}
        className={classNames("__wab_instance", sty.capital)}
        subtitle={
          <div
            data-plasmic-name={"subtitle3"}
            data-plasmic-override={overrides.subtitle3}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.subtitle3,
              {
                [sty.subtitle3estado_enTermino]: hasVariant(
                  $state,
                  "estado",
                  "enTermino"
                )
              }
            )}
          >
            {"$ NNN.NNN.NNN"}
          </div>
        }
        title={
          <div
            data-plasmic-name={"title3"}
            data-plasmic-override={overrides.title3}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.title3,
              {
                [sty.title3estado_enTermino]: hasVariant(
                  $state,
                  "estado",
                  "enTermino"
                )
              }
            )}
          >
            {"Capital"}
          </div>
        }
      />

      <TextGroup
        data-plasmic-name={"intereses"}
        data-plasmic-override={overrides.intereses}
        className={classNames("__wab_instance", sty.intereses, {
          [sty.interesesestado_enTermino]: hasVariant(
            $state,
            "estado",
            "enTermino"
          )
        })}
        subtitle={
          <div
            data-plasmic-name={"subtitle4"}
            data-plasmic-override={overrides.subtitle4}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.subtitle4,
              {
                [sty.subtitle4estado_enTermino]: hasVariant(
                  $state,
                  "estado",
                  "enTermino"
                )
              }
            )}
          >
            {"$ NNN.NNN.NNN"}
          </div>
        }
        title={
          <div
            data-plasmic-name={"title4"}
            data-plasmic-override={overrides.title4}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.title4,
              {
                [sty.title4estado_enTermino]: hasVariant(
                  $state,
                  "estado",
                  "enTermino"
                )
              }
            )}
          >
            {"Intereses"}
          </div>
        }
      />
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "text",
    "textGroup",
    "title",
    "subtitle",
    "total",
    "title2",
    "subtitle2",
    "capital",
    "title3",
    "subtitle3",
    "intereses",
    "title4",
    "subtitle4"
  ],
  text: ["text"],
  textGroup: ["textGroup", "title", "subtitle"],
  title: ["title"],
  subtitle: ["subtitle"],
  total: ["total", "title2", "subtitle2"],
  title2: ["title2"],
  subtitle2: ["subtitle2"],
  capital: ["capital", "title3", "subtitle3"],
  title3: ["title3"],
  subtitle3: ["subtitle3"],
  intereses: ["intereses", "title4", "subtitle4"],
  title4: ["title4"],
  subtitle4: ["subtitle4"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  text: "div";
  textGroup: typeof TextGroup;
  title: "div";
  subtitle: "div";
  total: typeof TextGroup;
  title2: "div";
  subtitle2: "div";
  capital: typeof TextGroup;
  title3: "div";
  subtitle3: "div";
  intereses: typeof TextGroup;
  title4: "div";
  subtitle4: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDashboardPanelContent__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDashboardPanelContent__VariantsArgs;
    args?: PlasmicDashboardPanelContent__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDashboardPanelContent__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicDashboardPanelContent__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicDashboardPanelContent__ArgProps,
          internalVariantPropNames: PlasmicDashboardPanelContent__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicDashboardPanelContent__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDashboardPanelContent";
  } else {
    func.displayName = `PlasmicDashboardPanelContent.${nodeName}`;
  }
  return func;
}

export const PlasmicDashboardPanelContent = Object.assign(
  // Top-level PlasmicDashboardPanelContent renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),
    textGroup: makeNodeComponent("textGroup"),
    title: makeNodeComponent("title"),
    subtitle: makeNodeComponent("subtitle"),
    total: makeNodeComponent("total"),
    title2: makeNodeComponent("title2"),
    subtitle2: makeNodeComponent("subtitle2"),
    capital: makeNodeComponent("capital"),
    title3: makeNodeComponent("title3"),
    subtitle3: makeNodeComponent("subtitle3"),
    intereses: makeNodeComponent("intereses"),
    title4: makeNodeComponent("title4"),
    subtitle4: makeNodeComponent("subtitle4"),

    // Metadata about props expected for PlasmicDashboardPanelContent
    internalVariantProps: PlasmicDashboardPanelContent__VariantProps,
    internalArgProps: PlasmicDashboardPanelContent__ArgProps
  }
);

export default PlasmicDashboardPanelContent;
/* prettier-ignore-end */
